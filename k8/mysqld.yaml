apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysqlds
spec:
  serviceName: "mysqld"
  replicas: 2
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      app: mysqld
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        app: mysqld
    spec:
      initContainers:
      - name: datanode-dependency-check
        image: hopsworks/rondb-standalone:22.10.1
        command:
        # Make sure data node has connected to MGMd
        # TODO: Parse ordinal number to apply for node-id
        - /bin/bash
        - -c
        - |
          until nslookup mgmds-0.mgmd.default.svc.cluster.local; do
            echo "Waiting for mgmds-0.mgmd.default.svc.cluster.local to be resolvable..."
            sleep 3
          done

          # Wait until data node is ready
          until ./docker/rondb_standalone/healthcheck.sh mgmds-0.mgmd.default.svc.cluster.local:1186 1; do
            echo "Dependency healthcheck of ndbmtd failed. Retrying in 3 seconds..."
            sleep 3
          done
      containers:
      - name: mysqld
        image: hopsworks/rondb-standalone:22.10.1
        args:
          - mysqld
        ports:
          - containerPort: 3306
        # TODO: Template resources
        resources:
          limits:
            cpu: '2'
            memory: 1400M
          requests:
            memory: 650M
        env:
          - name: HOST_GROUP_ID
            value: "0"
          # TODO: Add this to secrets
          # - name: MYSQL_ROOT_PASSWORD
          #   value: "Abc123?eeee"
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "true"
          # TODO: Add this to secrets
          - name: MYSQL_BENCH_USER
            value: "hopsworks"
          - name: MYSQL_BENCH_PASSWORD
            value: "Abc123?e"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MYSQL_DATABASES_INIT_FILE
            value: /etc/pod-info/database-is-initialised.txt
        livenessProbe:
          exec:
            command:
              - 'mysqladmin'
              - 'ping'
              - '-uroot'
          failureThreshold: 6
          initialDelaySeconds: 25
          periodSeconds: 10
          timeoutSeconds: 2
        securityContext:
          capabilities:
            add:
              - SYS_NICE
        volumeMounts:
        # Only mount single file, otherwise entire directory becomes read-only
        - name: rondb-configs
          mountPath: /srv/hops/mysql-cluster/my.cnf
          subPath: my.cnf
        - name: dbs-have-initialized
          mountPath: /etc/pod-info
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
      volumes:
      - name: rondb-configs
        configMap:
          name: rondb-configs
      - name: dbs-have-initialized
        persistentVolumeClaim:
          claimName: dbs-have-initialized-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysqld
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    app: mysqld
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dbs-have-initialized-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Ki
