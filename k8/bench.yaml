apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: benchs
spec:
  serviceName: "bench"
  replicas: 1
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      app: bench
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        app: bench
    spec:
      initContainers:
      - name: mysqld-dependency-check
        image: hopsworks/rondb-standalone:22.10.1
        command:
        # Make sure data node has connected to MGMd
        # TODO: Parse ordinal number to apply for node-id
        - /bin/bash
        - -c
        - |
          until nslookup mgmds-0.mgmd.default.svc.cluster.local; do
            echo "Waiting for mgmds-0.mgmd.default.svc.cluster.local to be resolvable..."
            sleep 3
          done

          until ./docker/rondb_standalone/healthcheck.sh mgmds-0.mgmd.default.svc.cluster.local:1186 67; do
            echo "Dependency healthcheck of MySQLd failed. Retrying in 3 seconds..."
            sleep 3
          done
      - name: populate-benchmark-files
        image: hopsworks/rondb-standalone:22.10.1
        command:
        - /bin/bash
        - -c
        - |
          source /srv/hops/mysql-cluster/common.env
          source /srv/hops/mysql-cluster/container.env

          AUTOBENCH_SYSBENCH_TEMPLATE=$(cat /srv/hops/mysql-cluster/autobench_sysbench.conf)
          AUTOBENCH_DBT2_TEMPLATE=$(cat /srv/hops/mysql-cluster/autobench_dbt2.conf)

          AUTOBENCH_SYS_SINGLE_FILEPATH="/home/mysql/benchmarks/sysbench_single/autobench.conf"
          AUTOBENCH_SYS_MULTI_FILEPATH="/home/mysql/benchmarks/dbt2_single/autobench.conf"
          AUTOBENCH_DBT2_SINGLE_FILEPATH="/home/mysql/benchmarks/sysbench_multi/autobench.conf"
          AUTOBENCH_DBT2_MULTI_FILEPATH="/home/mysql/benchmarks/dbt2_multi/autobench.conf"

          MGMD_IPS=mgmds-0.mgmd.default.svc.cluster.local
          SINGLE_MYSQLD_IP=mysqlds-0.mysqld.default.svc.cluster.local

          # This will always have 1 benchmarking and 1 MySQLd container, and 1 Sysbench instance
          AUTOBENCH_SYSBENCH_SINGLE=$(printf "$AUTOBENCH_SYSBENCH_TEMPLATE" \
            "$SINGLE_MYSQLD_IP" "$MYSQL_BENCH_USER" "$MYSQL_BENCH_PASSWORD" \
            "$MYSQLD_SLOTS_PER_CONTAINER" "$MGMD_IPS" \
            "$AUTO_SYS_THREAD_COUNTS_TO_RUN" "$AUTO_SYS_SYSBENCH_ROWS" \
            "1")
          echo "$AUTOBENCH_SYSBENCH_SINGLE" > "$AUTOBENCH_SYS_SINGLE_FILEPATH"

          AUTOBENCH_DBT2_SINGLE=$(printf "$AUTOBENCH_DBT2_TEMPLATE" \
            "$SINGLE_MYSQLD_IP" "$MYSQL_BENCH_USER" "$MYSQL_BENCH_PASSWORD" \
            "$MYSQLD_SLOTS_PER_CONTAINER" "$MGMD_IPS" \
            "$AUTO_DBT2_DBT2_WAREHOUSES")
          echo "$AUTOBENCH_DBT2_SINGLE" > "$AUTOBENCH_DBT2_SINGLE_FILEPATH"

        # if [ "$NUM_MYSQLD_NODES" -gt 1 ]; then
        #     echo "Writing benchmarking files for multiple MySQLds"

        #     AUTOBENCH_SYSBENCH_MULTI=$(printf "$AUTOBENCH_SYSBENCH_TEMPLATE" \
        #         "$MULTI_MYSQLD_IPS" "$MYSQL_BENCH_USER" "$MYSQL_BENCH_PASSWORD" \
        #         "$MYSQLD_SLOTS_PER_CONTAINER" "$MGMD_IPS" \
        #         "$AUTO_SYS_THREAD_COUNTS_TO_RUN" "$AUTO_SYS_SYSBENCH_ROWS" \
        #         "$NUM_MYSQLD_NODES")
        #     echo "$AUTOBENCH_SYSBENCH_MULTI" > "$AUTOBENCH_SYS_MULTI_FILEPATH"

        #     AUTOBENCH_DBT2_MULTI=$(printf "$AUTOBENCH_DBT2_TEMPLATE" \
        #         "$MULTI_MYSQLD_IPS" "$MYSQL_BENCH_USER" "$MYSQL_BENCH_PASSWORD" \
        #         "$MYSQLD_SLOTS_PER_CONTAINER" "$MGMD_IPS" \
        #         "$AUTO_DBT2_DBT2_WAREHOUSES")
        #     echo "$AUTOBENCH_DBT2_MULTI" > "$AUTOBENCH_DBT2_MULTI_FILEPATH"
        # fi
        volumeMounts:
        - name: rondb-templates
          mountPath: /srv/hops/mysql-cluster/autobench_sysbench.conf
          subPath: autobench_sysbench.conf
        - name: rondb-templates
          mountPath: /srv/hops/mysql-cluster/autobench_dbt2.conf
          subPath: autobench_dbt2.conf
        - name: rondb-configs
          mountPath: /srv/hops/mysql-cluster/common.env
          subPath: common.env
        # TODO: Adjust this depending on which cluster size is being used
        - name: rondb-configs
          mountPath: /srv/hops/mysql-cluster/container.env
          subPath: small.env
        - name: sysbench-single
          mountPath: /home/mysql/benchmarks/sysbench_single
        - name: dbt2-single
          mountPath: /home/mysql/benchmarks/dbt2_single
        - name: sysbench-multi
          mountPath: /home/mysql/benchmarks/sysbench_multi
        - name: dbt2-multi
          mountPath: /home/mysql/benchmarks/dbt2_multi
      containers:
      - name: bench
        image: hopsworks/rondb-standalone:22.10.1
        command:
        # Alternatively: 'sleep infinity' for manual tests
        - /bin/bash
        - -c
        - |
          bench_run.sh --verbose --default-directory /home/mysql/benchmarks/$RUN_BENCHMARK $GENERATE_DBT2_DATA_FLAG
        env:
          - name: RUN_BENCHMARK
            value: sysbench_single
          # Only if benchmark is dbt2
          # - name: GENERATE_DBT2_DATA_FLAG
          #   value: --generate-dbt2-data
          - name: MYSQL_BENCH_PASSWORD
            value: "Abc123?e"
          - name: HOST_GROUP_ID
            value: "0"
          # TODO: Parse ordinal number to apply for node-id
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        # Only mount single file, otherwise entire directory becomes read-only
        - name: rondb-configs
          mountPath: /srv/hops/mysql-cluster/rest_api.json
          subPath: rest_api.json
        - name: sysbench-single
          mountPath: /home/mysql/benchmarks/sysbench_single
        - name: dbt2-single
          mountPath: /home/mysql/benchmarks/dbt2_single
        - name: sysbench-multi
          mountPath: /home/mysql/benchmarks/sysbench_multi
        - name: dbt2-multi
          mountPath: /home/mysql/benchmarks/dbt2_multi
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
      volumes:
      - name: rondb-configs
        configMap:
          name: rondb-configs
      - name: rondb-templates
        configMap:
          name: rondb-templates
      - name: sysbench-single
        persistentVolumeClaim:
          claimName: sysbench-single-claim
      - name: dbt2-single
        persistentVolumeClaim:
          claimName: dbt2-single-claim
      - name: sysbench-multi
        persistentVolumeClaim:
          claimName: sysbench-multi-claim
      - name: dbt2-multi
        persistentVolumeClaim:
          claimName: dbt2-multi-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sysbench-single-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dbt2-single-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sysbench-multi-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dbt2-multi-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
---
apiVersion: v1
kind: Service
metadata:
  name: bench
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    app: bench
