apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ndbmtds
spec:
  serviceName: "ndbmtd"
  replicas: 1
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      app: ndbmtd
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        app: ndbmtd
    spec:
      initContainers:
      - name: mgmd-dependency-check
        image: hopsworks/rondb-standalone:22.10.1
        command:
        - /bin/bash
        - -c
        - |
          until nslookup mgmds-0.mgmd.default.svc.cluster.local; do
            echo "Waiting for mgmds-0.mgmd.default.svc.cluster.local to be resolvable..."
            sleep 3
          done
      containers:
      - name: ndbmtd
        image: hopsworks/rondb-standalone:22.10.1
        args:
          - ndbmtd
          # TODO: Parse ordinal number to apply for node-id
          - --ndb-nodeid=1
          - --initial
          - --ndb-connectstring=mgmds-0.mgmd.default.svc.cluster.local:1186
        ports:
          - containerPort: 11860
        resources:
          limits:
            cpu: '2'
            memory: 3000M
          requests:
            memory: 2000M
        env:
          - name: HOST_GROUP_ID
            value: "0"
          # TODO: Parse ordinal number to apply for node-id
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            # TODO: Parse ordinal number to apply for node-id 
            - './docker/rondb_standalone/healthcheck.sh mgmds-0.mgmd.default.svc.cluster.local:1186 1'
          failureThreshold: 3
          initialDelaySeconds: 20
          periodSeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - name: rondb-ndbmtd-data
          mountPath: /srv/hops/mysql-cluster/ndb_data
        - name: rondb-ndbmtd-log
          mountPath: /srv/hops/mysql-cluster/log
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
      volumes:
      - name: rondb-ndbmtd-data
        persistentVolumeClaim:
          claimName: rondb-ndbmtd-data-claim
      - name: rondb-ndbmtd-log
        persistentVolumeClaim:
          claimName: rondb-ndbmtd-log-claim
---
apiVersion: v1
kind: Service
metadata:
  name: ndbmtd
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    app: ndbmtd
  ports:
    - protocol: TCP
      port: 11860
      targetPort: 11860
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rondb-ndbmtd-data-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rondb-ndbmtd-log-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
