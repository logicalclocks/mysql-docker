name: Build, test & push executor

on:
  workflow_call:
    # WARNING: Duplicate everything here into workflow_dispatch
    inputs:
      rondb_version:
        required: true
        type: string
      rondb_x86_tarball_name:
        required: true
        type: string
      rondb_arm64_tarball_name:
        required: true
        type: string
      is_latest_rondb_release:
        required: true
        description: "Is latest stable RonDB release"
        type: boolean
        default: false
      skip_test:
        required: true
        description: "Don't run a docker-compose cluster with benchmarking"
        type: boolean
        default: false
  # Inputs here have to be duplicated from workflow_call...
  # https://github.com/orgs/community/discussions/39357
  workflow_dispatch:
    inputs:
      rondb_version:
        required: true
        type: string
      rondb_x86_tarball_name:
        required: true
        type: string
      rondb_arm64_tarball_name:
        required: true
        type: string
      is_latest_rondb_release:
        required: true
        description: "Is latest stable RonDB release"
        type: boolean
        default: false
      skip_test:
        required: true
        description: "Don't run a docker-compose cluster with benchmarking"
        type: boolean
        default: false

env:
  BASE_DOWNLOAD_URL: https://repo.hops.works/master
  ARM_IMAGE_NAME: rondb-arm64
  X86_IMAGE_NAME: rondb-amd64

jobs:
  check-git:
    runs-on: ubuntu-latest
    outputs:
      is_highest_release: ${{ steps.is_highest_release.outputs.is_highest }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if current branch is the highest release branch
        if: github.repository == 'logicalclocks/rondb-docker'
        id: is_highest_release
        run: |
          ALL_RELEASES=$(git branch -r | grep 'origin/release-' | sed 's|origin/||')
          HIGHEST_RELEASE=$(echo "$ALL_RELEASES" | sort -V | tail -n 1)
          echo "Highest release branch is $HIGHEST_RELEASE"
          if [ "${GITHUB_REF_NAME}" = "$HIGHEST_RELEASE" ]; then
            echo "Current branch is the highest release branch."
            echo "is_highest=true" >> $GITHUB_ENV
          else
            echo "Current branch is not the highest release branch."
            echo "is_highest=false" >> $GITHUB_ENV
          fi

  build-test-push-x86:
    runs-on: ubuntu-latest
    needs: [check-git]
    if: ${{ !inputs.skip_test || (github.repository == 'logicalclocks/rondb-docker' && (startsWith(github.ref_name, 'release-') || github.ref_name == 'main'))}}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        if: github.repository == 'logicalclocks/rondb-docker' && (startsWith(github.ref_name, 'release-') || github.ref_name == 'main')
        with:
          username: hopsworks
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and run Docker Compose cluster with benchmarking
        if: ${{ !inputs.skip_test }}
        run: |
          ./run.sh -lv \
            --rondb-tarball-url $BASE_DOWNLOAD_URL/${{ inputs.rondb_x86_tarball_name }} \
            --rondb-version ${{ inputs.rondb_version }} \
            --size mini \
            --run-benchmark sysbench_single \
            --detached

      - name: Wait for one container exit or timeout
        if: ${{ !inputs.skip_test }}
        run: |
          start=`date +%s`
          while true; do
              end=`date +%s`
              runtime=$((end-start))
              if [ $( docker container ls --filter "status=exited" | grep rondb | wc -l ) -gt 0 ]; then
                  echo "One container is down. We can continue"
                  docker container ls --filter "status=exited"
                  exit 0
              elif [ $runtime -gt 800 ]; then
                  echo "The benchmarking seems to be stuck. We're aborting now."
                  docker ps
                  exit 1
              fi
              sleep 2
          done

      - run: docker container ls
        if: ${{ !inputs.skip_test }}
      - run: docker logs mgmd_1
        if: ${{ !inputs.skip_test }}
      - run: docker logs ndbd_1
        if: ${{ !inputs.skip_test }}
      - run: docker logs mysqld_1
        if: ${{ !inputs.skip_test }}
      - run: docker logs rest_1
        if: ${{ !inputs.skip_test }}
      - run: docker logs bench_1
        if: ${{ !inputs.skip_test }}

      # At this point we only know that one container has exited. We want to
      # check whether the bench container has exited with exit code 0. We need
      # both status and exit code to do so, since Docker reports exit code 0
      # for running containers.
      - name: Check Benchmarking Exit Code
        if: ${{ !inputs.skip_test }}
        run: |
          if [ "$(docker inspect bench_1 --format='{{.State.Status}}')" != "exited" ]
          then
            echo "Some container other than bench_1 exited unexpectedly."
            docker ps -a
            exit 1
          elif [ "$(docker inspect bench_1 --format='{{.State.ExitCode}}')" != "0" ]
          then
            echo "Benchmarking failed."
            cat autogenerated_files/*/volumes/sysbench_single/sysbench_results/oltp_rw_0_0.res
            exit 1
          fi

      - name: Printing Sysbench results
        if: ${{ !inputs.skip_test }}
        run: cat autogenerated_files/*/volumes/sysbench_single/final_result.txt

      - name: Build X86 image
        if: ${{ inputs.skip_test && github.repository == 'logicalclocks/rondb-docker' && (startsWith(github.ref_name, 'release-') || github.ref_name == 'main')}}
        run: |
          VERSION="$(sed -e 's/^[[:space:]]*//' -e '/-SNAPSHOT$/s/.*/dev/' ./VERSION)"
          docker buildx build . \
              --tag rondb:${{ inputs.rondb_version }}-$VERSION \
              --build-arg RONDB_VERSION=${{ inputs.rondb_version }} \
              --build-arg RONDB_TARBALL_LOCAL_REMOTE=remote \
              --build-arg RONDB_X86_TARBALL_URI=$BASE_DOWNLOAD_URL/${{ inputs.rondb_x86_tarball_name }}

      - name: Push standard versioned image
        if: github.repository == 'logicalclocks/rondb-docker' && (startsWith(github.ref_name, 'release-') || github.ref_name == 'main')
        run: |
          VERSION="$(sed -e 's/^[[:space:]]*//' -e '/-SNAPSHOT$/s/.*/dev/' ./VERSION)"
          IMAGE_NAME=hopsworks/$X86_IMAGE_NAME:${{ inputs.rondb_version }}-$VERSION

          docker tag rondb:${{ inputs.rondb_version }}-$VERSION $IMAGE_NAME
          docker push $IMAGE_NAME

      - name: Push with tag `<rondb-version>-latest`
        # Our "latest" branch points to the latest *release* branch.
        if: needs.check-git.outputs.is_highest_release == 'true'
        run: |
          VERSION="$(sed -e 's/^[[:space:]]*//' -e '/-SNAPSHOT$/s/.*/dev/' ./VERSION)"
          IMAGE_NAME=hopsworks/$X86_IMAGE_NAME:${{ inputs.rondb_version }}-latest

          docker tag rondb:${{ inputs.rondb_version }}-$VERSION $IMAGE_NAME
          docker push $IMAGE_NAME

      - name: Push with tag `latest`
        if: ${{ needs.check-git.outputs.is_highest_release && inputs.is_latest_rondb_release }}
        run: |
          VERSION="$(sed -e 's/^[[:space:]]*//' -e '/-SNAPSHOT$/s/.*/dev/' ./VERSION)"
          IMAGE_NAME=hopsworks/$X86_IMAGE_NAME:latest

          docker tag rondb:${{ inputs.rondb_version }}-$VERSION $IMAGE_NAME
          docker push $IMAGE_NAME

  build-push-arm64:
    runs-on: ubuntu-latest
    if: github.repository == 'logicalclocks/rondb-docker' && (startsWith(github.ref_name, 'release-') || github.ref_name == 'main')
    needs: [check-git]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: hopsworks
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # We're skipping the benchmarking on ARM64 as we assume this will be run on a regular basis
      # during development. ARM64 images are only for development anyways. It is more important to add
      # all types of benchmarking to the tests.
      - name: Build and push ARM64 image
        run: |
          VERSION="$(sed -e 's/^[[:space:]]*//' -e '/-SNAPSHOT$/s/.*/dev/' ./VERSION)"
          TAGS="--tag hopsworks/$ARM_IMAGE_NAME:${{ inputs.rondb_version }}-$VERSION"
          if [[ "${{ needs.check-git.outputs.is_highest_release }}" == "true" ]]; then
            TAGS+=" --tag hopsworks/$ARM_IMAGE_NAME:${{ inputs.rondb_version }}-latest"
            if [[ "${{ inputs.is_latest_rondb_release }}" == "true" ]]; then
              TAGS+=" --tag hopsworks/$ARM_IMAGE_NAME:latest"
            fi
          fi

          docker buildx build . \
              $TAGS \
              --platform=linux/arm64 \
              --output type=registry \
              --build-arg RONDB_VERSION=${{ inputs.rondb_version }} \
              --build-arg RONDB_TARBALL_LOCAL_REMOTE=remote \
              --build-arg RONDB_ARM_TARBALL_URI=$BASE_DOWNLOAD_URL/${{ inputs.rondb_arm64_tarball_name }} \
              --cache-to type=registry,ref=hopsworks/rondb-cache,mode=max \
              --cache-from type=registry,ref=hopsworks/rondb-cache,mode=max

  make-multi-platform-image:
    runs-on: ubuntu-latest
    if: github.repository == 'logicalclocks/rondb-docker' && (startsWith(github.ref_name, 'release-') || github.ref_name == 'main')
    needs: [check-git, build-test-push-x86, build-push-arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: hopsworks
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-platform image
        run: |
          VERSION="$(sed -e 's/^[[:space:]]*//' -e '/-SNAPSHOT$/s/.*/dev/' ./VERSION)"

          docker buildx imagetools create -t hopsworks/rondb:${{ inputs.rondb_version }}-$VERSION \
            hopsworks/$X86_IMAGE_NAME:${{ inputs.rondb_version }}-$VERSION \
            hopsworks/$ARM_IMAGE_NAME:${{ inputs.rondb_version }}-$VERSION
        
          if [[ "${{ needs.check-git.outputs.is_highest_release }}" == "true" ]]; then
            docker buildx imagetools create -t hopsworks/rondb:${{ inputs.rondb_version }}-latest \
              hopsworks/$X86_IMAGE_NAME:${{ inputs.rondb_version }}-latest \
              hopsworks/$ARM_IMAGE_NAME:${{ inputs.rondb_version }}-latest
              
              if [[ "${{ inputs.is_latest_rondb_release }}" == "true" ]]; then
                docker buildx imagetools create -t hopsworks/rondb:latest \
                  hopsworks/$X86_IMAGE_NAME:latest \
                  hopsworks/$ARM_IMAGE_NAME:latest
              fi
          fi
